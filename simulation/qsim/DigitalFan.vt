// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/13/2023 15:22:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DigitalFan
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DigitalFan_vlg_sample_tst(
	bi,
	bm,
	clk,
	rst,
	sampler_tx
);
input  bi;
input  bm;
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(bi or bm or clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DigitalFan_vlg_check_tst (
	mode,
	q,
	v,
	sampler_rx
);
input  mode;
input  q;
input [1:0] v;
input sampler_rx;

reg  mode_expected;
reg  q_expected;
reg [1:0] v_expected;

reg  mode_prev;
reg  q_prev;
reg [1:0] v_prev;

reg  mode_expected_prev;
reg  q_expected_prev;
reg [1:0] v_expected_prev;

reg  last_mode_exp;
reg  last_q_exp;
reg [1:0] last_v_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	mode_prev = mode;
	q_prev = q;
	v_prev = v;
end

// update expected /o prevs

always @(trigger)
begin
	mode_expected_prev = mode_expected;
	q_expected_prev = q_expected;
	v_expected_prev = v_expected;
end



// expected mode
initial
begin
	mode_expected = 1'bX;
end 

// expected q
initial
begin
	q_expected = 1'bX;
end 
// expected v[ 1 ]
initial
begin
	v_expected[1] = 1'bX;
end 
// expected v[ 0 ]
initial
begin
	v_expected[0] = 1'bX;
end 
// generate trigger
always @(mode_expected or mode or q_expected or q or v_expected or v)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected mode = %b | expected q = %b | expected v = %b | ",mode_expected_prev,q_expected_prev,v_expected_prev);
	$display("| real mode = %b | real q = %b | real v = %b | ",mode_prev,q_prev,v_prev);
`endif
	if (
		( mode_expected_prev !== 1'bx ) && ( mode_prev !== mode_expected_prev )
		&& ((mode_expected_prev !== last_mode_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mode :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mode_expected_prev);
		$display ("     Real value = %b", mode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mode_exp = mode_expected_prev;
	end
	if (
		( q_expected_prev !== 1'bx ) && ( q_prev !== q_expected_prev )
		&& ((q_expected_prev !== last_q_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_exp = q_expected_prev;
	end
	if (
		( v_expected_prev[0] !== 1'bx ) && ( v_prev[0] !== v_expected_prev[0] )
		&& ((v_expected_prev[0] !== last_v_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v_expected_prev);
		$display ("     Real value = %b", v_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_v_exp[0] = v_expected_prev[0];
	end
	if (
		( v_expected_prev[1] !== 1'bx ) && ( v_prev[1] !== v_expected_prev[1] )
		&& ((v_expected_prev[1] !== last_v_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v_expected_prev);
		$display ("     Real value = %b", v_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_v_exp[1] = v_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DigitalFan_vlg_vec_tst();
// constants                                           
// general purpose registers
reg bi;
reg bm;
reg clk;
reg rst;
// wires                                               
wire mode;
wire q;
wire [1:0] v;

wire sampler;                             

// assign statements (if any)                          
DigitalFan i1 (
// port map - connection between master ports and signals/registers   
	.bi(bi),
	.bm(bm),
	.clk(clk),
	.mode(mode),
	.q(q),
	.rst(rst),
	.v(v)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// bi
initial
begin
	bi = 1'b0;
	bi = #10000 1'b1;
	bi = #60000 1'b0;
	bi = #20000 1'b1;
	bi = #50000 1'b0;
	bi = #40000 1'b1;
	bi = #50000 1'b0;
	bi = #20000 1'b1;
	bi = #60000 1'b0;
	bi = #30000 1'b1;
	bi = #70000 1'b0;
	bi = #20000 1'b1;
	bi = #30000 1'b0;
	bi = #30000 1'b1;
	bi = #140000 1'b0;
	bi = #10000 1'b1;
	bi = #130000 1'b0;
	bi = #10000 1'b1;
	bi = #130000 1'b0;
end 

// bm
initial
begin
	bm = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #110000 1'b1;
	rst = #70000 1'b0;
	rst = #640000 1'b1;
end 

DigitalFan_vlg_sample_tst tb_sample (
	.bi(bi),
	.bm(bm),
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

DigitalFan_vlg_check_tst tb_out(
	.mode(mode),
	.q(q),
	.v(v),
	.sampler_rx(sampler)
);
endmodule

